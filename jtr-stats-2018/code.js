'use strict'
const {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Text} = Recharts;
const { PieChart, Pie, Sector, Cell } = Recharts;
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];


//     perusp√§iv√§raha + ty√∂markkinatuki sitten asumistuki + toimeentulotuki ja sen j√§lkeen siihen ansiosidonnainen


class Main extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            data: [],
            map: {}
        }
    }
    async componentDidMount() {
        const data = await d3.csv("jtr-data.csv");
        const dataMap = {}
        data.columns.forEach((col,idx)=>{
            dataMap[col] = []
            Array.from(data).forEach(row=>{
                dataMap[col].push(row[col])
            })
        })
        this.setState({data: data, map: dataMap})
    }
    render() {
        return (
            <div className="content">
                <img src="metso.png"></img>
                <h1>Jyv√§skyl√§ Trail Runners kysely</h1>
                <p>
                Jyv√§skyl√§ Trail Runners facebook-ryhm√§ss√§ pyydettiin ihmisi√§
                vastaamaan laadittuun kyselyyn. Vastausten m√§√§r√§ oli varsin hyv√§ 98
                vastausta 888 ryhm√§l√§isen joukosta (lukum√§√§r√§ tarkistettu 15.10.2018).
                </p>

                <Participants map={this.state.map}/>
                <hr noshade="" />
                <StartingLevel map={this.state.map}/>
                <hr noshade="" />
                <DreamsAndGoals map={this.state.map}/>
                <hr noshade="" />
                <Training map={this.state.map}/>
                <hr noshade="" />
                <h3>Yhteenveto</h3>

                Jyv√§skyl√§ Trail Runners -ryhm√§n juoksija on keskim√§√§rin keski-ik√§inen
                nainen joka ajaa kolmesta nelj√§√§n kertaan viikossa kello viiden
                j√§lkeen Laajavuoreen treenaamaan puoleksitoistatunniksi
                kymment√§ kilometri√§ neulasbaanaa nauttiakseen luonnosta.
                Porukkalenkeill√§ h√§n on k√§ynyt ja piti siit√§.
                H√§n haaveilee polkujuoksusta tuntureilla muttei kykene siihen ajanpuutteen vuoksi.

            </div>
        );
    }
}

function counts(data) {
    return data.reduce((acc, value)=>{
        if (value == "") return acc
        if (!acc[value]) acc[value]=0;
        acc[value]++
        return acc
    }, {})
}

function multiCount(data) {

}

const RADIAN = Math.PI / 180;
const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }, data) => {
    const radius = innerRadius + (outerRadius - innerRadius) * 1.2;
    const x = cx + radius * Math.cos(-midAngle * RADIAN);
    const y = cy  + radius * Math.sin(-midAngle * RADIAN) + (index==0? -15:0);
    
    return (
            <text x={x} y={y} fill="black" textAnchor={x > cx ? 'start' : 'end'}
                   dominantBaseline="central">
                {`${data[index].name} ${(percent * 100).toFixed(0)}%`}
            </text>
    );
}

function sum(data) {
    return data.map(i=>Number.parseInt(i.value)).reduce((acc, value)=>acc + value, 0)
}
function sumNonEmpty(data) {
    return data.reduce((acc,value)=>acc+(value==""?0:1), 0)
}

class Participants extends React.Component {
    constructor(props) {
        super(props)
    }
    
    render() {
        let data = this.props.map['Ik√§?'] || [];
        let ages = _.pairs(counts(data)).map(p=>{return { name: p[0], value: p[1]}})
        ages.sort((a,b)=>{ return a.name.localeCompare(b.name) })
        if (ages.length)
            ages.push(ages.shift())

        let sex = _.pairs(counts(this.props.map['Sukupuoli?'] || [])).map(p=>{return { name: p[0], value: p[1]}})
        sex.sort()

        const sexLabel = params => renderCustomizedLabel(params, sex)
        const agesLabel = params => renderCustomizedLabel(params, ages)

      	return (
            <div>
                <h2>Kyselyn taustatiedot</h2>
                <h3>Vastaajien sukupuoli</h3>

    	        <PieChart width={800} height={400} onMouseEnter={this.onPieEnter}>
                    <Pie data={sex} cx={400} cy={200} 
                        labelLine={false}
                        label={sexLabel}
                        outerRadius={120} 
                        fill="#8884d8"
                    >
                        {
                            sex.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)
                        }
                    </Pie>
                </PieChart>

                { sum(sex) } vastaajaa kertoi kyselyn alkutietoihin liittyv√§n sukupuolen. Tilastollisesti on melko todenn√§k√∂ist√§
                t√∂rm√§t√§ yhteislenkill√§ naisjuoksijaan. Varsinkin jos juoksee liian l√§hell√§ eik√§ kerke√§ jarruttamaan üòÖ


                <h3>Vastaajien ik√§</h3>

    	        <PieChart width={800} height={400} onMouseEnter={this.onPieEnter}>
                    <Pie data={ages} cx={400} cy={200} 
                        labelLine={false}
                        label={agesLabel}
                        outerRadius={120} 
                        fill="#8884d8"
                    >
                        {
                        ages.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)
                        }
                    </Pie>
                </PieChart>
                { sum(ages) } vastaajaa kertoi oman ik√§ryhm√§ns√§. P√§√§osa juoksijoista on keski-i√§n molemmin puolin.
                Aivan nuorta sakkia polkujuoksu ei viel√§ innosta.

            </div>
        );
    }
}

class StartingLevel extends React.Component {
    
    render() {
        const best = '1km lenkin;5km lenkin;10km lenkin;puolimaratonin;maratonin;ultran'.split(';')
        let run = this.props.map['Olen juossut viimeisen vuoden aikana'] || []
        run = run.map(r=>{
            let nums = r.split(';').map(distance=>best.indexOf(distance))
            return best[Math.max(...nums)]
        })
        let runData = _.pairs(counts(run)).map(p=>{return { name: p[0], value: p[1]}})
        runData.sort((a,b)=>{
            return best.indexOf(a.name) - best.indexOf(b.name)
        })

        let sexSet = this.props.map['Sukupuoli?'] || []
        let combine = run.map((value, idx)=>{ return { sex: sexSet[idx], best: value } })

        let combinedData = best.map((distance)=>{
            return {
                name: distance,
                nainen: combine.reduce((acc, value)=>acc + (value.sex=='nainen' && value.best==distance && 1), 0),
                mies: combine.reduce((acc, value)=>acc + (value.sex=='mies' && value.best==distance && 1), 0)
            }
        })

        let fitnes = _.pairs(counts(this.props.map['Viimeisen vuoden aikana teen v√§hint√§√§n puolituntia kest√§v√§√§ liikuntaa'] || [])).map(p=>{return { name: p[0], value: p[1]}})
        const fitnesLabel = params => renderCustomizedLabel(params, fitnes)

      	return (
            <div>
                <h2>L√§ht√∂taso</h2>
                <h3>Viimeisen vuoden aikana juostu</h3>

                <BarChart width={600} height={300} data={combinedData}
                    layout="vertical"
                    margin={{top: 5, right: 30, left: 90, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category"/>
                    <Tooltip/>
                    <Legend/>
                    <Bar dataKey="nainen" fill="#9c0507" />
                    <Bar dataKey="mies" fill="#3a8887" />
                </BarChart>

                { sum(runData) } vastasi kuinka pitk√§lle on pisimmill√§√§n juossut viimeisen vuoden aikana.
                Aika moni ei ole viel√§ p√§√§ssyt nauttimaan viikonlopun pitkist√§ m√§tt√∂metrein. 
                Tilastollisesti miehet painottuvat hieman pidemmille matkoille kuin naiset.


                <h3>Viimeisen vuoden aikana teen v√§hint√§√§n puolituntia kest√§v√§√§ liikuntaa</h3>

    	        <PieChart width={800} height={400} onMouseEnter={this.onPieEnter}>
                    <Pie data={fitnes} cx={400} cy={200} 
                        labelLine={false}
                        label={fitnesLabel}
                        outerRadius={120} 
                        fill="#8884d8"
                    >
                        {
                        fitnes.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)
                        }
                    </Pie>
                </PieChart>
                { sum(fitnes) } vastaajaa kertoi kuinka usein on liikkunut viikottain viimeisen vuoden aikana.
                H√§mm√§stytt√§v√§n moni (38%) saa itsens√§ liikkeelle yli viidesti viikossa ja 3-4 kertaa viikossa liikkujia on puolet (50%).
                Sohvan painovoima on voitettu! üí™
            </div>
        );
    }
}

function countListOptions(data){
    let all = []
    data.forEach(gs=>gs.split(';').forEach(g=>{if (g != '') all.push(g)}))
    all = _.uniq(all)
    let counts = _.object(all.map(g=>[g, 0]))
    data.forEach(gs=>gs.split(';').forEach(g=>{ if (g != '') counts[g]++}))
    return _.pairs(counts).map(p=>{return { name: p[0], value: p[1]}})
}
class DreamsAndGoals extends React.Component {

    render() {
        let goal = this.props.map['Tavoitteenani on'] || []
        let goalsData = countListOptions(goal)
        goalsData.sort((a,b)=>b.value-a.value)

        let dream = this.props.map['Haaveissani olisi'] || []
        let dreamsData = countListOptions(dream)
        dreamsData.sort((a,b)=>b.value-a.value)

        let wall = this.props.map['Isoimmat esteet haaveilleni ovat kai'] || []
        let wallsData = countListOptions(wall)
        wallsData.sort((a,b)=>b.value-a.value)

        const customizedLabel = ({x, y, fill, value}) => {
                 return <text 
                         x={x} 
                         y={y} 
                         dy={-4} 
                         fontSize='16' 
                         fontFamily='sans-serif'
                         fill={fill}
                         textAnchor="middle">{value}%</text>
            }
      	return (
            <div>
                <h2>Haaveet ja tavoitteet</h2>
                <h3>Tavoitteenani juoksussa on</h3>

                <BarChart width={800} height={300} data={goalsData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 350, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category" tick={{width: 450 }} />
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

                Tavoitteisiin vastasi { sumNonEmpty(goal) } juoksijaa.
                T√§rkeimm√§ksi tavoitteeksi nousi luonnosta nauttiminen,
                tutustuminen uusiin juoksukamuihin ja juoksumatkan lis√§√§minen.
                Mit√§p√§ t√§h√§n lis√§√§m√§√§n, olette puhuneet - ugh!

                <h3>Haaveissani on juosta</h3>

                <BarChart width={800} height={300} data={dreamsData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 380, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category" tick={{width: 450 }} />
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

                Saimme { sumNonEmpty(dream) } vastausta juoksijoiden haaveista.
                Suosituin haave oli polkujuoksu pohjoisessa Suomessa. Pohjoisessa 
                juokseminen on ensivuonnakin mahdollista osallistumalla esim. 
                Yll√§s-Pallas-Hetta, Pyh√§n tai Kaldoaivin juoksuihin.
                Monesti ryhm√§ss√§ sovitaan my√∂s yhteiskyydeist√§ ja majoituksista.
                Saa my√∂s ehdottaa omaa reitti√§ kunhan muistaa <a href="https://www.kiilopaa.fi/blogi/kirjoitus/2018/03/tunturivaeltajan-viisi-kaskya.html">s√§√§nn√∂t</a>. 
                <p/>
                Kansallispuistoissa, retkeilyreitist√∂ill√§ ja omilla reiteill√§
                juoksemme jatkossakin pitkiksi√§. Ne ovat yleens√§ melko rauhallisia,
                joten mukaan kannattaa l√§hte√§ rohkeasti.
                <p/>
                Maamme ulkopuolella j√§rjestet√§√§n useita loistavia juoksukilpailuja.
                Kannattaa kys√§ist√§ n√§ist√§ lis√§√§ esim. Anssilta, Tiinalta, Tommilta, Annalta tai Paavolta.

                <h3>Suurimmat esteet haaveilleni ovat</h3>

                <BarChart width={800} height={300} data={wallsData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 250, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category" tick={{width: 450 }} />
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

                { sumNonEmpty(wall) } vastasi suurimpiin esteisiin haaveiden toteuttamiseen.
                Yll√§tys yll√§tys, suurin este harrastuksille on ajanpuute üòä
                Laiskuuteen auttaa kun sopii yhteislenkin kaverin kanssa üòá
            </div>
        );
    }
}

class Training extends React.Component {
    render() {

        let participated = _.pairs(counts(this.props.map['Olen k√§ynyt yhteislenkill√§'] || [])).map(p=>{return { name: p[0], value: p[1]}})
        const participatedLabel = params => renderCustomizedLabel(params, participated)

        let place = this.props.map['Minulle k√§tevi√§ treenipaikkoja olisivat '] || []
        place = place.map(p=>p.replace(', ',';').replace(/ /g, '').replace('!',''))
        let placeData = countListOptions(place)
        placeData.sort((a,b)=>b.value-a.value)
        placeData = placeData.splice(0,10)

        let logistics = this.props.map['K√§yn treeneiss√§ yleens√§'] || []
        let logisticsData = countListOptions(logistics)
        logisticsData.sort((a,b)=>b.value-a.value)
        logisticsData.pop()
        logisticsData.pop()

        const times = ["5-7", "7-10", "10-12", "12-15", "15-17", "17-19", "19-21", ">21"]

        let arki = {
            Maanantai: 'Paras ajoitus olisi (kellonaika) - [puhelin vaakatasoon] [Maanantai]',
            Tiistai: 'Paras ajoitus olisi (kellonaika) - [puhelin vaakatasoon] [Tiistai]',
            Keskiviikko: 'Paras ajoitus olisi (kellonaika) - [puhelin vaakatasoon] [Keskiviikko]',
            Torstai: 'Paras ajoitus olisi (kellonaika) - [puhelin vaakatasoon] [Torstai]',
            Perjantai: 'Paras ajoitus olisi (kellonaika) - [puhelin vaakatasoon] [Perjantai]'
        }
        Object.keys(arki).forEach(day=>{ arki[day] = countListOptions(this.props.map[arki[day]] || []) })
        const arkiData = times.map(time=>{
            let ret = { name: time }
            Object.keys(arki).forEach(day=>{
                ret[day] = (_.find(arki[day], { name: time}) || {}).value
            })
            return ret
        })

        let weekend = {
            Lauantai: 'Paras ajoitus olisi (kellonaika) - [puhelin vaakatasoon] [Lauantai]',
            Sunnuntai: 'Paras ajoitus olisi (kellonaika) - [puhelin vaakatasoon] [Sunnuntai]',
        }
        Object.keys(weekend).forEach(day=>{ weekend[day] = countListOptions(this.props.map[weekend[day]] || []) })
        const weekendData = times.map(time=>{
            let ret = { name: time }
            Object.keys(weekend).forEach(day=>{
                ret[day] = (_.find(weekend[day], { name: time}) || {}).value
            })
            return ret
        })

        
        let duration = this.props.map['Treenim√§√§r√§n√§ minusta olisi optimaalinen'] || []
        let durationData = countListOptions(duration)
        const order = ["30 min", "45 min", "1 h", "1 h 30 min", "2 h", "2 h 30 min"]
        durationData.sort((a,b)=>order.indexOf(a.name)-order.indexOf(b.name))

        let power = this.props.map['Treenin tehokkuus tulisi olla mielest√§ni'] || []
        let powerData = countListOptions(power)
        powerData.sort((a,b)=>b.value-a.value)
        powerData = powerData.splice(0,6)


        let ground = this.props.map['Treenimaaston tulisi sis√§lt√§√§'] || []
        let groundData = countListOptions(ground)
        groundData.sort((a,b)=>b.value-a.value)
        
        let communication = this.props.map['Treeneist√§ tulisi ilmoittaa'] || []
        let communicationData = countListOptions(communication)
        communicationData.sort((a,b)=>b.value-a.value)

        return (
            <div>
                <h2>L√§hitreenit</h2>
                <h3>Olen k√§ynyt yhteislenkill√§</h3>

                <PieChart width={800} height={400} onMouseEnter={this.onPieEnter}>
                    <Pie data={participated} cx={400} cy={200} 
                        labelLine={false}
                        label={participatedLabel}
                        outerRadius={120} 
                        fill="#8884d8"
                    >
                        {
                            participated.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)
                        }
                    </Pie>
                </PieChart>

                { sum(participated)} vastasi oliko osallistunut jo yhteislenkille. Selv√§sti miettimisen
                paikka miten saisimme aktivoitua loputkin juoksijat yhteisletkaan ü§î

                <h3>Yhteislenkki oli mielest√§ni</h3>

                54/65 eli 83% piti yhteislenkki√§ "ihan sopivana kaikin puolin ja mukavana" üëç
                <p/>
                Kriittisemp√§√§kin s√§vy√§ l√∂ytyi...
                <p/>
                Emme kuitenkaan l√§hde kritiikki√§ t√§ss√§ avaamaan, koska
                <div>a) positiivisuuden kautta</div>
                <div>b) t√§m√§ on harrastus jota jokainen tekee vapaaehtoisuudesta k√§sin</div>
                <div>c) jos osaat paremmin, niin siit√§ vaan toimeen üòÄ</div>
                

                <h3>K√§tev√§t treenipaikat</h3>

                <BarChart width={800} height={300} data={placeData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 250, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category" tick={{width: 450 }} />
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

                Laajis n√§ytt√§√§ voittavan k√§tevimm√§n treenipaikan tittelin. Siell√§ on mm. riitt√§v√§n iso autoparkki.
                Iso ilmainen parkki l√∂ytyy my√∂s Touruvuoren, Keljon-Kankaan ja Myllyj√§rven l√§helt√§.
                Halssilassa taas autopaikkoja on v√§h√§n, mutta lenkki siell√§ l√§hell√§ ihmisi√§ tai sitten Karmitsa on vaan niin vetoava üòç
                <p/>
                Yksitt√§isi√§ ehdotuksia tuli my√∂s Tiituspohja, Hein√§m√§ki, Multam√§ki,
                Keskusta, S√§ykki, Mustalampi, Palokka, Hanhiper√§, Kinkomaa ja Peurunka.
                N√§m√§ kaikki ovat paikkoja joissa varmasti tullaan juoksemaan jatkossakin.

                <h3>Logistiikka - siirtyminen treenipaikalle</h3>

                <BarChart width={800} height={300} data={logisticsData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 150, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category" tick={{width: 450 }} />
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

                Valtaosa juoksijoista tekee siirtym√§t treenimestoille omalla autolla.
                Kyyti√§ tarvitsevat muistakaa jatkossakin kysell√§ ryhm√§ss√§, t√§m√§n tilaston valossa kyydin saanti on hyvin todenn√§k√∂ist√§.

                <h3>Paras treeniaika</h3>

                <BarChart width={800} height={300} data={arkiData}
                    margin={{top: 5, right: 30, left: 30, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <YAxis type="number"/>
                    <XAxis dataKey="name" type="category"/>
                    <Tooltip/>
                    <Legend/>
                    <Bar dataKey="Maanantai" fill={COLORS[0]} />
                    <Bar dataKey="Tiistai" fill={COLORS[1]} />
                    <Bar dataKey="Keskiviikko" fill={COLORS[2]} />
                    <Bar dataKey="Torstai" fill={COLORS[3]} />
                    <Bar dataKey="Perjantai" fill="#3a8887" />
                </BarChart>

                <BarChart width={800} height={300} data={weekendData}
                    margin={{top: 5, right: 30, left: 30, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <YAxis type="number"/>
                    <XAxis dataKey="name" type="category"/>
                    <Tooltip/>
                    <Legend/>
                    <Bar dataKey="Lauantai" fill={COLORS[0]} />
                    <Bar dataKey="Sunnuntai" fill={COLORS[1]} />
                </BarChart>

                Parasta treeniaika jakaantuu kahteen osaan arkeen ja viikonloppuun. Arkena aikaa treenille n√§ytt√§√§ olevan klo 17-19 tai viimeist√§√§n 19-21.
                Viikonloppuna aikaa harrastelulle on vaikka koko p√§iv√§n.

                <h3>Treenien sopiva kesto ajallisesti</h3>

                <BarChart width={800} height={300} data={durationData}
                    margin={{top: 5, right: 30, left: 30, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <YAxis type="number"/>
                    <XAxis dataKey="name" type="category"/>
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

                <h3>Treenien sopiva tehokkuus</h3>

                <BarChart width={800} height={300} data={powerData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 450, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category"  tick={{width: 450 }}/>
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>


                Toivomuslistalla oli lis√§ksi:
                <ul>
                <li>Erilaisia kimppalenkkivaihtoehtoja eritasoisten juoksijoiden tarpeisiin. üòä</li>
                <li>Olen hitaampi kuin etana tervassa ja se on suurin kynnys lenkeille. Toinen haaste on perheen ruoka-ajat, jolloin olisi oltava kotona.</li>
                <li>Vaihtelevia treenej√§ ajallisesti ja tehoiltaan.</li>
                <li>Vetotreenit</li>
                <li>Jos ilottelu juoksun aikana tarkoittaa tekniikkaharjoitteita niin sit√§ :) Ei mielell√§√§n yrj√∂ilylenkkej√§ - eik√§ raastoa. Lenkit kannattaisi varmaan jotenkin m√§√§ritell√§ niin ett√§ kaikki tiet√§isiv√§t mit√§ on tarjolla. N√§in peruspirkko lenkkeilij√§ ei aina ymm√§rr√§ mit√§ kaikkea mielenkiintoista lenkeill√§nne tapahtuukaan. Voi sitten rajata hulluimmat ulkopuolelle tai valmistautua niihin v√§h√§n eri tavalla :) Ps.hyv√§ kysely! Lis√§ys seuraavaan kysymykseen: kaikkea ei tarvitse olla tarjolla joka lenkill√§ vaan tietty eri lenkeill√§ eri maastoja.. eli aina ei tartte olla helppoa neulaspolkua vaan eri kertoina eri juttuja?</li>
                <li>Kunnon VK/MK-t√∂√∂ttej√§</li>
                <li>tekniikkaralleja voisi tehd√§ joskus porukalla</li>
                </ul>


                <h2>Polkupohja</h2>

                <BarChart width={800} height={300} data={groundData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 150, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category"  tick={{width: 450 }}/>
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

                Kummallisesti neulasbaana voitti parkettikisan.

                <h2>Harjoitusten ilmoitusaika</h2>

                <BarChart width={800} height={300} data={communicationData}
                    layout="vertical" 
                    margin={{top: 5, right: 30, left: 400, bottom: 5}}>
                    <CartesianGrid strokeDasharray="3 3"/>
                    <XAxis type="number"/>
                    <YAxis dataKey="name" type="category"  tick={{width: 450 }}/>
                    <Tooltip/>
                    <Bar dataKey="value" fill="#3a8887" />
                </BarChart>

            </div>
        );
    }
}



ReactDOM.render(
  <Main />,
  document.getElementById('root')
);
